<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %}
    <div class="login-signup">
        <h1>Login</h1>
        <p>Username</p>
        <input id="username"/>
        <p>Password</p>
        <input id="password"  type="password"/>
        <br>
        <br>
        <button onclick="login()">Login</button>
    </div>

    <script>
        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

    document.addEventListener('keydown', function(event) {
        if (event.keyCode === 13) {
            login();
        }
    });

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";

            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let res = await axios.post(loginURL, {
                username: $("#username").val(),
                password: $("#password").val()
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            const salt_res = await axios.get("/key/salt"); 
            const salt = Uint8Array.from(salt_res.data);
            
            // obtain the master_key_string
            const key_res = await axios.get("/key/master");
            const master_key_res = key_res.data["key"];
            const iv = key_res.data["iv"];
            
            // import server's master key
            const master_server_key = await crypto.subtle.importKey(
                'raw',
                new TextEncoder().encode(master_key_res),
                { name: 'AES-GCM' },
                true,
                ['encrypt', 'decrypt']
            );

            // imports the user's password for use by KDF
            const key_material = await crypto.subtle.importKey(
                "raw", 
                new TextEncoder().encode($("#password").val()), 
                { name: 'PBKDF2' },
                false, 
                ["deriveBits", "deriveKey"]
            );
            
            // derive a key from the user's password
            const derived_pass_key =  await crypto.subtle.deriveKey(
                {
                    name: "PBKDF2",
                    salt: salt,
                    iterations: 100000,
                    hash: "SHA-256",
                },
                key_material,
                { name: "AES-GCM", length: 256 },
                true,
                ["encrypt", "decrypt"],
            );
            const exported_key = await crypto.subtle.exportKey('raw', derived_pass_key);
            
            // encrypt the user derived key using the server's master key 
            // using the salt that each user has as the iv for encryption
            const encrypted_key = await crypto.subtle.encrypt(
                { name: 'AES-GCM', iv: new TextEncoder().encode(iv) },
                master_server_key,
                exported_key
            );

            // store the user's encrypted key in the browser. storage will last as long as session
            localStorage.setItem("key", JSON.stringify(Array.from(new Uint8Array(encrypted_key))));

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab
            window.open(res.data, "_self")
        }
    </script>
{% endblock %}
